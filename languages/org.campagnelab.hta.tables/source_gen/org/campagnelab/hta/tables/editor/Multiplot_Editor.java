package org.campagnelab.hta.tables.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import org.campagnelab.ui.code.Swing.ButtonCallback;
import org.campagnelab.ui.code.Swing.Button;
import jetbrains.mps.lang.editor.table.runtime.TableModelFactory;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import org.campagnelab.hta.tables.behavior.Multiplot_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;

public class Multiplot_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_3oqcxl_a(editorContext, node);
  }

  private EditorCell createCollection_3oqcxl_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_3oqcxl_a");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createCollection_3oqcxl_a0(editorContext, node));
    editorCell.addEditorCell(this.createTable_3oqcxl_b0(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_3oqcxl_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_3oqcxl_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_3oqcxl_a0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_3oqcxl_b0a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_3oqcxl_c0a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_3oqcxl_d0a(editorContext, node));
    editorCell.addEditorCell(this.createAlternation_3oqcxl_e0a(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Multiplot");
    editorCell.setCellId("Constant_3oqcxl_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_b0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "->");
    editorCell.setCellId("Constant_3oqcxl_b0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefNode_3oqcxl_c0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("destination");
    provider.setNoTargetText("<no destination>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("destination");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createCollection_3oqcxl_d0a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_3oqcxl_d0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_3oqcxl_a3a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_3oqcxl_b3a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_3oqcxl_c3a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_3oqcxl_d3a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_3oqcxl_e3a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_3oqcxl_f3a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_3oqcxl_g3a0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_a3a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "[ ");
    editorCell.setCellId("Constant_3oqcxl_a3a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_3oqcxl_b3a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("numColumns");
    provider.setNoTargetText("<no numColumns>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_numColumns");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_c3a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "cols");
    editorCell.setCellId("Constant_3oqcxl_c3a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_d3a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "x");
    editorCell.setCellId("Constant_3oqcxl_d3a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_3oqcxl_e3a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("numRows");
    provider.setNoTargetText("<no numRows>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_numRows");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_f3a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "rows");
    editorCell.setCellId("Constant_3oqcxl_f3a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_3oqcxl_g3a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "]");
    editorCell.setCellId("Constant_3oqcxl_g3a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createAlternation_3oqcxl_e0a(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = Multiplot_Editor.renderingCondition_3oqcxl_a4a0(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createJComponent_3oqcxl_a4a0(editorContext, node);
    } else {
      editorCell = this.createJComponent_3oqcxl_a4a0_0(editorContext, node);
    }
    return editorCell;
  }

  private static boolean renderingCondition_3oqcxl_a4a0(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getBoolean(node, "preview");
  }

  private EditorCell createJComponent_3oqcxl_a4a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Multiplot_Editor._QueryFunction_JComponent_3oqcxl_a0e0a(node, editorContext), "_3oqcxl_a4a0");
    editorCell.setCellId("JComponent_3oqcxl_a4a0");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_3oqcxl_a0e0a(final SNode node, final EditorContext editorContext) {
    ButtonCallback callback = new ButtonCallback(node, editorContext) {
      public void process(final SNode n, final EditorContext editorContext) {
        {
          final SNode node = ((SNode) n);
          SPropertyOperations.set(node, "preview", "" + (false));
        }
      }
    };
    return Button.createButton("Hide preview", editorContext, node, callback);

  }

  private EditorCell createJComponent_3oqcxl_a4a0_0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Multiplot_Editor._QueryFunction_JComponent_3oqcxl_a0e0a_0(node, editorContext), "_3oqcxl_a4a0_0");
    editorCell.setCellId("JComponent_3oqcxl_a4a0_0");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_3oqcxl_a0e0a_0(final SNode node, final EditorContext editorContext) {
    ButtonCallback callback = new ButtonCallback(node, editorContext) {
      public void process(final SNode n, final EditorContext editorContext) {
        {
          final SNode node = ((SNode) n);
          SPropertyOperations.set(node, "preview", "" + (true));
        }
      }
    };
    return Button.createButton("Preview", editorContext, node, callback);

  }

  private EditorCell createTable_3oqcxl_b0(EditorContext editorContext, SNode node) {
    TableModelFactory creator = new TableModelFactory() {
      public TableModel createTableModel(final SNode node, final EditorContext editorContext) {
        return new TableModel() {
          public int getColumnCount() {
            return SPropertyOperations.getInteger(node, "numColumns");
          }

          public int getRowCount() {
            return SPropertyOperations.getInteger(node, "numRows");
          }

          public void deleteRow(int rowNumber) {
            int newVal = SPropertyOperations.getInteger(node, "numRows") - 1;
            SPropertyOperations.set(node, "numRows", "" + (Math.max(0, newVal)));
          }

          public SNode getValueAt(int row, int column) {
            return Multiplot_Behavior.call_getAt_8962032619587151678(node, row, column);
          }

          public void createElement(int row, int column) {
            ListSequence.fromList(SLinkOperations.getTargets(node, "plots", true)).addElement(SConceptOperations.createNewNode("org.campagnelab.hta.tables.structure.PlotRefWithPreview", null));
          }

          public SubstituteInfo getSubstituteInfo(int row, int column) {
            return null;
          }

          public void insertRow(int rowNumber) {
            SPropertyOperations.set(node, "numRows", "" + (SPropertyOperations.getInteger(node, "numRows") + 1));
          }

          public void deleteColumn(int columnNumber) {
            SPropertyOperations.set(node, "numColumns", "" + (Math.max(0, SPropertyOperations.getInteger(node, "numColumns") - 1)));
          }

          public void insertColumn(int columnNumber) {
            SPropertyOperations.set(node, "numColumns", "" + (SPropertyOperations.getInteger(node, "numColumns") + 1));
          }

          public int getMaxColumnWidth(int columnNumber) {
            int maxWidth = 0;
            for (int rowIndex = 0; rowIndex < SPropertyOperations.getInteger(node, "numRows"); rowIndex++) {
              maxWidth = Math.max(maxWidth, SPropertyOperations.getInteger(SLinkOperations.getTarget(Multiplot_Behavior.call_getAt_8962032619587151678(node, rowIndex, columnNumber), "plot", false), "width"));
            }
            return maxWidth;
          }
        };
      }
    };
    jetbrains.mps.openapi.editor.cells.EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.createTableModel(node, editorContext), "Table_3oqcxl_b0");
    editorCell.setCellId("Table_3oqcxl_b0_0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
}
