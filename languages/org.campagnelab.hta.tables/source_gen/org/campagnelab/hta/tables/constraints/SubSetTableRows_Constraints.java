package org.campagnelab.hta.tables.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import org.campagnelab.hta.tables.behavior.FutureTable_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;

public class SubSetTableRows_Constraints extends BaseConstraintsDescriptor {
  public SubSetTableRows_Constraints() {
    super("org.campagnelab.hta.tables.structure.SubSetTableRows");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("", new BaseReferenceConstraintsDescriptor("", this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }

      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }

      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        // copy columns from source to destination: subseting does not change the table columns 
        FutureTable_Behavior.call_setSchemaFrom_4166618652721995042(SLinkOperations.getTarget(referenceNode, "destination", true), SLinkOperations.getTarget(referenceNode, "", false));
        if (isEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(referenceNode, "destination", true), "table", false), "name"))) {
          SPropertyOperations.set(SLinkOperations.getTarget(SLinkOperations.getTarget(referenceNode, "destination", true), "table", false), "name", SPropertyOperations.getString(SLinkOperations.getTarget(referenceNode, "destination", true), "name"));
        }
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {};
      }
    });
    return references;
  }

  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
