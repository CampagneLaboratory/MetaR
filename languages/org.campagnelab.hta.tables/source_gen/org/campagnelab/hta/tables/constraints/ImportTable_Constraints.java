package org.campagnelab.hta.tables.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;

public class ImportTable_Constraints extends BaseConstraintsDescriptor {
  public ImportTable_Constraints() {
    super("org.campagnelab.hta.tables.structure.ImportTable");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("table", new BaseReferenceConstraintsDescriptor("table", this) {
      @Override
      public boolean hasOwnOnReferenceSetHandler() {
        return true;
      }

      @Override
      public boolean validate(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        return true;
      }

      @Override
      public void onReferenceSet(final SNode referenceNode, final SNode oldReferentNode, final SNode newReferentNode) {
        SLinkOperations.setTarget(referenceNode, "future", SConceptOperations.createNewNode("org.campagnelab.hta.tables.structure.FutureTable", null), true);
        SLinkOperations.setTarget(SLinkOperations.getTarget(referenceNode, "future", true), "table", newReferentNode, false);
        SPropertyOperations.set(SLinkOperations.getTarget(referenceNode, "future", true), "name", SPropertyOperations.getString(newReferentNode, "name"));
        SPropertyOperations.set(SLinkOperations.getTarget(SLinkOperations.getTarget(referenceNode, "future", true), "table", false), "name", SPropertyOperations.getString(newReferentNode, "name"));
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {};
      }
    });
    return references;
  }
}
