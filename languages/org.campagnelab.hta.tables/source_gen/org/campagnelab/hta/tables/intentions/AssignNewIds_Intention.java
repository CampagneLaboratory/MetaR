package org.campagnelab.hta.tables.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.campagnelab.hta.tables.behavior.Statement_Behavior;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AssignNewIds_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AssignNewIds_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.hta.tables.structure.Analysis";
  }

  public String getPresentation() {
    return "AssignNewIds";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.hta.tables.intentions.AssignNewIds_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.hta.tables";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:597299e2-456c-40ec-87e4-c5fdcfc8d153(org.campagnelab.hta.tables.intentions)", "8962032619593737648");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AssignNewIds_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Assign New IDs to Statements";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      ListSequence.fromList(SNodeOperations.getDescendants(node, "org.campagnelab.hta.tables.structure.Statement", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SPropertyOperations.set(it, "id", Statement_Behavior.call_randomCreate_8962032619593737530(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("org.campagnelab.hta.tables.structure.Statement"))), 10));
        }
      });
    }

    public IntentionDescriptor getDescriptor() {
      return AssignNewIds_Intention.this;
    }
  }
}
