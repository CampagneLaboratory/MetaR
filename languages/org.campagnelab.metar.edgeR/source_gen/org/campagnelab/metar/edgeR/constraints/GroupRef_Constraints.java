package org.campagnelab.metar.edgeR.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.campagnelab.metar.tables.behavior.UsageType_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.scope.ListScope;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SNodePointer;

public class GroupRef_Constraints extends BaseConstraintsDescriptor {
  public GroupRef_Constraints() {
    super("org.campagnelab.metar.edgeR.structure.GroupRef");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("group", new BaseReferenceConstraintsDescriptor("group", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_efiolh_a0a0a0a0a1a0b0a1a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            {
              // find groups that include the group usages described in the model: 
              Iterable<SNode> groups = ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getAncestor(_context.getEnclosingNode(), "org.campagnelab.metar.edgeR.structure.EdgeRTest", true, false), "modelFormula", true), "groupExpression", true), "org.campagnelab.metar.edgeR.structure.GroupUsageRef", false, new String[]{})).translate(new ITranslator2<SNode, SNode>() {
                public Iterable<SNode> translate(SNode it) {
                  return UsageType_Behavior.call_columnsWithType_8031339867712208994(SLinkOperations.getTarget(it, "groupUsage", false));
                }
              });
              if (LOG.isInfoEnabled()) {
                LOG.info("groups=" + Sequence.fromIterable(groups).count());
              }
              return ListScope.forNamedElements(groups);
            }
          }
        };
      }
    });
    return references;
  }

  protected static Logger LOG = LogManager.getLogger(GroupRef_Constraints.class);
  private static SNodePointer breakingNode_efiolh_a0a0a0a0a1a0b0a1a1 = new SNodePointer("r:846b15be-6f92-4735-be77-ad398b16c9d7(org.campagnelab.metar.edgeR.constraints)", "8043901499795687153");
}
