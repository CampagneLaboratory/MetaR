package org.campagnelab.metar.edgeR.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_GroupFormula_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_GroupFormula_NonTypesystemRule() {
  }

  public void applyRule(final SNode edgeRTest, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    int maxColumnsWithTerm = 0;
    SNode tableRef = SLinkOperations.getTarget(edgeRTest, "countsTable", true);
    SNode container = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(edgeRTest), "org.campagnelab.metar.tables.structure.ColumnGroupContainer")).first();
    Set<Integer> numColumnsWithUsage = SetSequence.fromSet(new HashSet<Integer>());
    Map<String, Integer> termToNumColumns = MapSequence.fromMap(new HashMap<String, Integer>());

    {
      Iterator<SNode> term_it = ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(SLinkOperations.getTarget(edgeRTest, "modelFormula", true), "groupExpression", true), "org.campagnelab.metar.edgeR.structure.GroupUsageRef", false, new String[]{})).iterator();
      final Wrappers._T<SNode> term_var = new Wrappers._T<SNode>();
      while (term_it.hasNext()) {
        term_var.value = term_it.next();
        MapSequence.fromMap(termToNumColumns).put(SPropertyOperations.getString(SLinkOperations.getTarget(term_var.value, "groupUsage", false), "name"), ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(tableRef, "table", false), "columns", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode column) {
            return ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(column, new IAttributeDescriptor.NodeAttribute("org.campagnelab.metar.tables.structure.ColumnAnnotation")), "groups", true)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return (SLinkOperations.getTarget(it, "columnGroup", false) != null);
              }
            }).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(it, "columnGroup", false);
              }
            }).translate(new ITranslator2<SNode, SNode>() {
              public Iterable<SNode> translate(SNode it) {
                return SLinkOperations.getTargets(it, "usesRefs", true);
              }
            }).any(new IWhereFilter<SNode>() {
              public boolean accept(SNode group) {
                return eq_dmuq0o_a0a0a0a0a0a0a0a0a0b0a1a2a6a1(SPropertyOperations.getString(SLinkOperations.getTarget(group, "usage", false), "name"), SPropertyOperations.getString(SLinkOperations.getTarget(term_var.value, "groupUsage", false), "name"));
              }
            });
          }
        }).count());
      }
    }
    for (int numColumns : MapSequence.fromMap(termToNumColumns).values()) {
      SetSequence.fromSet(numColumnsWithUsage).addElement(numColumns);
    }
    if (SetSequence.fromSet(numColumnsWithUsage).count() != 1) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(SLinkOperations.getTarget(edgeRTest, "modelFormula", true), "All usages must mark an identical number of columns. Found " + SetSequence.fromSet(numColumnsWithUsage).count() + " distinct number of markerd columns " + IterableUtils.join(MapSequence.fromMap(termToNumColumns).select(new ISelector<IMapping<String, Integer>, String>() {
          public String select(IMapping<String, Integer> it) {
            return it.key() + " -> " + it.value();
          }
        }), " "), "r:769afbd7-9476-42d6-a27b-ed7cb561890f(org.campagnelab.metar.edgeR.typesystem)", "8031339867725572637", null, errorTarget);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "org.campagnelab.metar.edgeR.structure.EdgeRTest";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static boolean eq_dmuq0o_a0a0a0a0a0a0a0a0a0b0a1a2a6a1(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
