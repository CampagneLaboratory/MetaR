package org.campagnelab.metar.tables.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ApplyGroup_Intention implements IntentionFactory {
  public ApplyGroup_Intention() {
  }

  public String getConcept() {
    return "org.campagnelab.mps.XChart.structure.Column";
  }

  public String getPresentation() {
    return "ApplyGroup";
  }

  public String getPersistentStateKey() {
    return "org.campagnelab.metar.tables.intentions.ApplyGroup_Intention";
  }

  public String getLanguageFqName() {
    return "org.campagnelab.metar.tables";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(node, "org.campagnelab.metar.tables.structure.Table", false, false), "org.campagnelab.metar.tables.structure.ColumnAnnotation", false, new String[]{})).isNotEmpty();
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:597299e2-456c-40ec-87e4-c5fdcfc8d153(org.campagnelab.metar.tables.intentions)", "8459500803718255267");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<Set<String>> paramList = parameter(node, context);
    if (paramList != null) {
      for (Set<String> param : paramList) {
        ListSequence.fromList(list).addElement(new ApplyGroup_Intention.IntentionImplementation(param));
      }
    }
    return list;
  }

  private List<Set<String>> parameter(final SNode node, final EditorContext editorContext) {
    final List<Set<String>> groupSet = ListSequence.fromList(new ArrayList<Set<String>>());
    ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(node, "org.campagnelab.metar.tables.structure.Table", false, false), "org.campagnelab.metar.tables.structure.ColumnAnnotation", false, new String[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {

        final Set<String> groups = SetSequence.fromSet(new HashSet<String>());
        ListSequence.fromList(SLinkOperations.getTargets(it, "groups", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, "columnGroup", false) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "columnGroup", false);
          }
        }).visitAll(new IVisitor<SNode>() {
          public void visit(SNode groupRef) {
            SetSequence.fromSet(groups).addElement(SPropertyOperations.getString(groupRef, "name"));
          }
        });
        if (!(ListSequence.fromList(groupSet).contains(groups))) {
          ListSequence.fromList(groupSet).addElement(groups);
        }
      }
    });
    return groupSet;
  }

  public class IntentionImplementation implements IntentionExecutable {
    private Set<String> myParameter;

    public IntentionImplementation(Set<String> parameter) {
      myParameter = parameter;
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {

      String groupText = IterableUtils.join(SetSequence.fromSet(myParameter), ",");
      return "Apply Groups [" + groupText + "]";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute("org.campagnelab.metar.tables.structure.ColumnAnnotation"), SConceptOperations.createNewNode("org.campagnelab.metar.tables.structure.ColumnAnnotation", null));
      for (final String groupName : myParameter) {
        SNode groupRef = SConceptOperations.createNewNode("org.campagnelab.metar.tables.structure.ColumnGroupReference", null);
        SLinkOperations.setTarget(groupRef, "columnGroup", ListSequence.fromList(SModelOperations.getRootsIncludingImported(SNodeOperations.getModel(node), "org.campagnelab.metar.tables.structure.ColumnGroupContainer")).translate(new ITranslator2<SNode, SNode>() {
          public Iterable<SNode> translate(SNode it) {
            return SLinkOperations.getTargets(it, "groups", true);
          }
        }).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, "name").equals(groupName);
          }
        }), false);
        ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("org.campagnelab.metar.tables.structure.ColumnAnnotation")), "groups", true)).addElement(groupRef);
      }
    }

    public IntentionDescriptor getDescriptor() {
      return ApplyGroup_Intention.this;
    }
  }
}
