package org.campagnelab.metar.tables.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class MigrateGroupUsages_MigrationScript extends BaseMigrationScript {
  public MigrateGroupUsages_MigrationScript(IOperationContext operationContext) {
    super("Migrate column group usages");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate Usages to References";
      }

      public String getAdditionalInfo() {
        return "Migrate Usages to References";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "org.campagnelab.metar.tables.structure.ColumnGroup";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return ListSequence.fromList(SLinkOperations.getTargets(node, "uses", true)).isNotEmpty();
      }

      public void doUpdateInstanceNode(final SNode node) {
        final SNode container = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), "org.campagnelab.metar.tables.structure.ColumnGroupContainer")).first();
        ListSequence.fromList(SLinkOperations.getTargets(node, "uses", true)).visitAll(new IVisitor<SNode>() {
          public void visit(final SNode use) {
            SNodeOperations.detachNode(use);

            SNode usageType = ListSequence.fromList(SLinkOperations.getTargets(container, "usages", true)).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SPropertyOperations.getString(it, "name").equals(SPropertyOperations.getString(use, "name"));
              }
            });
            if (usageType == null) {
              ListSequence.fromList(SLinkOperations.getTargets(container, "usages", true)).addElement(use);
              usageType = use;
            }
            SNode ref = SConceptOperations.createNewNode("org.campagnelab.metar.tables.structure.UsageTypeRef", null);
            SLinkOperations.setTarget(ref, "usage", usageType, false);
            ListSequence.fromList(SLinkOperations.getTargets(node, "usesRefs", true)).addElement(ref);

          }
        });
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
  }
}
