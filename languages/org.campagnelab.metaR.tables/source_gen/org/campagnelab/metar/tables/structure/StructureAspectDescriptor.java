package org.campagnelab.metar.tables.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.AbstractRowFilter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "org.campagnelab.metar.tables.structure.RowFilter").abstract_().alias("filter how?", "Sub-concepts filter in different ways").create();
      case 1:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Analysis").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"statements"}, new boolean[]{false}).alias("Analysis", "").create();
      case 2:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ColumnAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"groups"}, new boolean[]{true}).create();
      case 3:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ColumnGroup").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"uses", "usesRefs"}, new boolean[]{true, true}).create();
      case 4:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ColumnGroupContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"usages", "groups"}, new boolean[]{true, true}).create();
      case 5:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ColumnGroupReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("columnGroup").create();
      case 6:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ColumnRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("col").create();
      case 7:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.CommonColumnSelection").super_("org.campagnelab.metar.tables.structure.KeySelection").parents("org.campagnelab.metar.tables.structure.KeySelection").children(new String[]{"byColumn"}, new boolean[]{true}).alias("column", "").create();
      case 8:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.DataTableStatement").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement", "org.campagnelab.metar.tables.structure.StatementDependencies").abstract_().alias("", "A Statement that generates to data.table function calls").create();
      case 9:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.DefinableObject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 10:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Define").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").children(new String[]{"object"}, new boolean[]{false}).create();
      case 11:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.DependentOnPackage").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("package").create();
      case 12:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.EmptyLine").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").alias("<empty line> ", "").create();
      case 13:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.FilterWithExpression").super_("org.campagnelab.metar.tables.structure.AbstractRowFilter").parents("org.campagnelab.metar.tables.structure.AbstractRowFilter").children(new String[]{"expression"}, new boolean[]{false}).alias("when true:", "").create();
      case 14:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.FilterWithIDList").super_("org.campagnelab.metar.tables.structure.AbstractRowFilter").parents("org.campagnelab.metar.tables.structure.AbstractRowFilter").references("set").alias("with IDs", "Filter rows that match a set of IDs").create();
      case 15:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.FitXByY").super_("org.campagnelab.metar.tables.structure.PlotBuilderStatement").parents("org.campagnelab.metar.tables.structure.PlotBuilderStatement").references("style").children(new String[]{"table", "plot", "x", "y", "groupBy"}, new boolean[]{false, false, false, false, false}).alias("fit x by y", "fit a linear model and show an annotated plot of the fit").create();
      case 16:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Formula").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"predictors", "y"}, new boolean[]{true, false}).create();
      case 17:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.FutureTable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("id").references("table").children(new String[]{"myOwnTable"}, new boolean[]{false}).create();
      case 18:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.FutureTableRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("table").create();
      case 19:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Heatmap").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"dataSelection", "plot", "table"}, new boolean[]{false, false, false}).alias("build heatmap", "").create();
      case 20:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Histogram").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"plot", "dataSelection", "table"}, new boolean[]{false, false, false}).alias("build histogram", "").create();
      case 21:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.IColumnNames").interface_().create();
      case 22:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ID").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("id").create();
      case 23:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ImportTable").super_("org.campagnelab.metar.tables.structure.DataTableStatement").parents("org.campagnelab.metar.tables.structure.DataTableStatement").references("table").children(new String[]{"future"}, new boolean[]{false}).alias("import table", "").create();
      case 24:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.JoinTables").super_("org.campagnelab.metar.tables.structure.TableTransformation").parents("org.campagnelab.metar.tables.structure.TableTransformation", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"byKeySelection"}, new boolean[]{false}).alias("join", "").create();
      case 25:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.KeySelection").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "org.campagnelab.metar.tables.structure.IColumnNames").abstract_().alias("key", "").create();
      case 26:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Model").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 27:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Multiplot").super_("org.campagnelab.metar.tables.structure.PlotBuilderStatement").parents("org.campagnelab.metar.tables.structure.PlotBuilderStatement", "jetbrains.mps.lang.core.structure.INamedConcept").properties("numRows", "numColumns", "preview").children(new String[]{"plots", "destination"}, new boolean[]{true, false}).alias("multiplot", "A Plot to arrange other plots").create();
      case 28:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.PDF").super_("org.campagnelab.metar.tables.structure.RenderingFormat").parents("org.campagnelab.metar.tables.structure.RenderingFormat").alias("", "Output format for rendering plots").create();
      case 29:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Plot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("id", "path", "width", "height").create();
      case 30:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.PlotBuilderStatement").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").create();
      case 31:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.PlotRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("plot").create();
      case 32:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.PlotRefWithPreview").super_("org.campagnelab.metar.tables.structure.PlotRef").parents("org.campagnelab.metar.tables.structure.PlotRef").create();
      case 33:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.PlotStyle").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("title", "pixelWidth", "pixelHeight").create();
      case 34:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.PredictWithModel").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").properties("columnName").references("model").children(new String[]{"table", "inputTable"}, new boolean[]{false, false}).alias("predict", "Predict with a model and put values in a new column").create();
      case 35:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.R_Package").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").alias("R Package", "Models an R package").create();
      case 36:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Range").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("min", "max").create();
      case 37:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Render").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").properties("filename").references("style", "plot").children(new String[]{"output"}, new boolean[]{false}).alias("render", "Render plot to output format").create();
      case 38:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.RenderStyle").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("pixelsPerInch").create();
      case 39:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.RenderingFormat").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 40:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.RowFilter").interface_().children(new String[]{"priorFilter"}, new boolean[]{false}).create();
      case 41:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.ScatterPlotStyle").super_("org.campagnelab.metar.tables.structure.PlotStyle").parents("org.campagnelab.metar.tables.structure.PlotStyle").properties("xLabel", "yLabel").children(new String[]{"xRange", "yRange"}, new boolean[]{false, false}).create();
      case 42:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.SelectByGroup").super_("org.campagnelab.metar.tables.structure.KeySelection").parents("org.campagnelab.metar.tables.structure.KeySelection").references("byGroup").alias("group", "").create();
      case 43:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.SetOfIds").super_("org.campagnelab.metar.tables.structure.DefinableObject").parents("org.campagnelab.metar.tables.structure.DefinableObject", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"ids"}, new boolean[]{true}).alias("set of IDs", "A set of IDs").create();
      case 44:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Statement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "org.campagnelab.metar.tables.structure.StatementDependencies").properties("id").abstract_().create();
      case 45:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.StatementDependencies").interface_().create();
      case 46:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.StatementList").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"transformations"}, new boolean[]{true}).create();
      case 47:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.SubSetTableRows").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").children(new String[]{"rowFilter", "destination", "table"}, new boolean[]{false, false, false}).alias("subset of rows", "Calculates the subset of rows for a table").create();
      case 48:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.Table").super_("org.campagnelab.mps.XChart.structure.Tsvfile").parents("org.campagnelab.mps.XChart.structure.Tsvfile", "jetbrains.mps.lang.core.structure.INamedConcept").alias("Table", "").create();
      case 49:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.TableRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("table").alias("", "Reference to a Table in Scope.").create();
      case 50:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.TableTransformation").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"inputTables", "outputTable"}, new boolean[]{true, false}).abstract_().create();
      case 51:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.TrainLinearModel").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").children(new String[]{"model", "formula", "table"}, new boolean[]{false, false, false}).alias("train linear model", "Train a linear model").create();
      case 52:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.UsageType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 53:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.UsageTypeRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("usage").create();
      case 54:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.UsesDataTable").interface_().parents("org.campagnelab.metar.tables.structure.StatementDependencies").create();
      case 55:
        return new ConceptDescriptorBuilder("org.campagnelab.metar.tables.structure.WriteTable").super_("org.campagnelab.metar.tables.structure.Statement").parents("org.campagnelab.metar.tables.structure.Statement").properties("path", "withQuotes", "separator").children(new String[]{"table"}, new boolean[]{false}).alias("write", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"org.campagnelab.metar.tables.structure.AbstractRowFilter", "org.campagnelab.metar.tables.structure.Analysis", "org.campagnelab.metar.tables.structure.ColumnAnnotation", "org.campagnelab.metar.tables.structure.ColumnGroup", "org.campagnelab.metar.tables.structure.ColumnGroupContainer", "org.campagnelab.metar.tables.structure.ColumnGroupReference", "org.campagnelab.metar.tables.structure.ColumnRef", "org.campagnelab.metar.tables.structure.CommonColumnSelection", "org.campagnelab.metar.tables.structure.DataTableStatement", "org.campagnelab.metar.tables.structure.DefinableObject", "org.campagnelab.metar.tables.structure.Define", "org.campagnelab.metar.tables.structure.DependentOnPackage", "org.campagnelab.metar.tables.structure.EmptyLine", "org.campagnelab.metar.tables.structure.FilterWithExpression", "org.campagnelab.metar.tables.structure.FilterWithIDList", "org.campagnelab.metar.tables.structure.FitXByY", "org.campagnelab.metar.tables.structure.Formula", "org.campagnelab.metar.tables.structure.FutureTable", "org.campagnelab.metar.tables.structure.FutureTableRef", "org.campagnelab.metar.tables.structure.Heatmap", "org.campagnelab.metar.tables.structure.Histogram", "org.campagnelab.metar.tables.structure.IColumnNames", "org.campagnelab.metar.tables.structure.ID", "org.campagnelab.metar.tables.structure.ImportTable", "org.campagnelab.metar.tables.structure.JoinTables", "org.campagnelab.metar.tables.structure.KeySelection", "org.campagnelab.metar.tables.structure.Model", "org.campagnelab.metar.tables.structure.Multiplot", "org.campagnelab.metar.tables.structure.PDF", "org.campagnelab.metar.tables.structure.Plot", "org.campagnelab.metar.tables.structure.PlotBuilderStatement", "org.campagnelab.metar.tables.structure.PlotRef", "org.campagnelab.metar.tables.structure.PlotRefWithPreview", "org.campagnelab.metar.tables.structure.PlotStyle", "org.campagnelab.metar.tables.structure.PredictWithModel", "org.campagnelab.metar.tables.structure.R_Package", "org.campagnelab.metar.tables.structure.Range", "org.campagnelab.metar.tables.structure.Render", "org.campagnelab.metar.tables.structure.RenderStyle", "org.campagnelab.metar.tables.structure.RenderingFormat", "org.campagnelab.metar.tables.structure.RowFilter", "org.campagnelab.metar.tables.structure.ScatterPlotStyle", "org.campagnelab.metar.tables.structure.SelectByGroup", "org.campagnelab.metar.tables.structure.SetOfIds", "org.campagnelab.metar.tables.structure.Statement", "org.campagnelab.metar.tables.structure.StatementDependencies", "org.campagnelab.metar.tables.structure.StatementList", "org.campagnelab.metar.tables.structure.SubSetTableRows", "org.campagnelab.metar.tables.structure.Table", "org.campagnelab.metar.tables.structure.TableRef", "org.campagnelab.metar.tables.structure.TableTransformation", "org.campagnelab.metar.tables.structure.TrainLinearModel", "org.campagnelab.metar.tables.structure.UsageType", "org.campagnelab.metar.tables.structure.UsageTypeRef", "org.campagnelab.metar.tables.structure.UsesDataTable", "org.campagnelab.metar.tables.structure.WriteTable"};
}
