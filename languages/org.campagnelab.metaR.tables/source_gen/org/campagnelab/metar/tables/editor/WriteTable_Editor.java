package org.campagnelab.metar.tables.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import org.campagnelab.ui.code.Swing.FileSelectorCallback;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import org.campagnelab.ui.code.Swing.FileSelector;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;

public class WriteTable_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9i7cce_a(editorContext, node);
  }

  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9i7cce_a_0(editorContext, node);
  }

  private EditorCell createCollection_9i7cce_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_9i7cce_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_9i7cce_a0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_9i7cce_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9i7cce_c0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_9i7cce_d0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_9i7cce_e0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_9i7cce_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "write");
    editorCell.setCellId("Constant_9i7cce_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefNode_9i7cce_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("table");
    provider.setNoTargetText("<no table>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("table");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_9i7cce_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "to");
    editorCell.setCellId("Constant_9i7cce_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_9i7cce_d0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("path");
    provider.setNoTargetText("<no path>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_path");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createJComponent_9i7cce_e0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, WriteTable_Editor._QueryFunction_JComponent_9i7cce_a4a(node, editorContext), "_9i7cce_e0");
    editorCell.setCellId("JComponent_9i7cce_e0");
    return editorCell;
  }

  private static JComponent _QueryFunction_JComponent_9i7cce_a4a(final SNode node, final EditorContext editorContext) {
    SNode containingNode = node;
    final String propertyName = "path";
    FileSelectorCallback callback = new FileSelectorCallback(containingNode, editorContext) {
      public void process(final String path, final SNode node, final EditorContext editorContext) {
        // set the path value in the property configured for the single selector button: 
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          @Override
          public void run() {
            // set the value of the path in the property on the target node: 
            SNodeAccessUtil.setProperty(node, propertyName, path);
          }
        });

      }
    };
    return FileSelector.createSelectionButton("./table.tsv", true, false, editorContext, node, callback);
  }

  private EditorCell createCollection_9i7cce_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_9i7cce_a_0");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_9i7cce_a0_0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_9i7cce_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9i7cce_c0_0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_9i7cce_d0_0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_9i7cce_a0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "separator:");
    editorCell.setCellId("Constant_9i7cce_a0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_9i7cce_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("separator");
    provider.setNoTargetText("<no separator>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_separator");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private EditorCell createConstant_9i7cce_c0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "with quotes:");
    editorCell.setCellId("Constant_9i7cce_c0_0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_9i7cce_d0_0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("withQuotes");
    provider.setNoTargetText("<no withQuotes>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_withQuotes");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
