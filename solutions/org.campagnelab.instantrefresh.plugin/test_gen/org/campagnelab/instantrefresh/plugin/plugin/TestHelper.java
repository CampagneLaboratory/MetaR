package org.campagnelab.instantrefresh.plugin.plugin;

/*Generated by MPS */

import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import junit.framework.Assert;
import org.campagnelab.metar.R.behavior.SaveSession__BehaviorDescriptor;
import java.io.File;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class TestHelper {
  public static Set<SNode> findChangesRScript(SNode root, SNode change) {
    convertNodeToRoot(root);
    Set<SNode> changelog = SetSequence.fromSet(new HashSet<SNode>());
    ChangedNodesHelper.findChangesRScript(changelog, root, change, SNodeOperations.getParent(change));
    return changelog;
  }

  public static Set<SNode> findChangesAnalysis(SNode root, SNode change) {
    convertNodeToRoot(root);
    Set<SNode> changelog = SetSequence.fromSet(new HashSet<SNode>());
    ChangedNodesHelper.findChangesAnalysis(changelog, root, change);
    return changelog;

  }
  public static SNode getNearestSessionRScript(SNode root, SNode unit) {
    convertNodeToRoot(root);
    return ChangeExecutor.getNearestSessionForRScript(unit);
  }

  public static void fakeSaveSession(SNode saveSession) {
    Assert.assertNotNull(SaveSession__BehaviorDescriptor.getSessionPath_id2xF4TVcGGn0.invoke(saveSession));
    File sessionPath = new File(SaveSession__BehaviorDescriptor.getSessionPath_id2xF4TVcGGn0.invoke(saveSession));
    try {
      sessionPath.getParentFile().mkdirs();
      sessionPath.createNewFile();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  public static void deleteTempResultsFolder(SNode saveSession) {
    File sessionPath = new File(SaveSession__BehaviorDescriptor.getSessionPath_id2xF4TVcGGn0.invoke(saveSession));
    deleteFileRecursively(sessionPath.getParentFile());
  }

  public static void deleteFileRecursively(File element) {
    if (element.isDirectory()) {
      for (File sub : element.listFiles()) {
        deleteFileRecursively(sub);
      }
    }
    element.delete();
  }

  public static void convertNodeToRoot(SNode rootNode) {
    SModel m = SNodeOperations.getModel(rootNode);
    SNodeOperations.detachNode(rootNode);
    SModelOperations.addRootNode(m, rootNode);
  }
}
