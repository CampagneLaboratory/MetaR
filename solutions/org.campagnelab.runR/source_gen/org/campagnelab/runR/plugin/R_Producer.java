package org.campagnelab.runR.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.execution.api.configurations.BaseMpsProducer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.plugins.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.intellij.execution.impl.RunManagerImpl;

public class R_Producer {
  private static String CONFIGURATION_FACTORY_CLASS_NAME = "org.campagnelab.runR.plugin.R_Configuration_Factory";

  public R_Producer() {
  }

  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new R_Producer.ProducerPart_NodeAnalysis_jzp8tc_a(configurationType, CONFIGURATION_FACTORY_CLASS_NAME));
    return creators;
  }

  public static class ProducerPart_NodeAnalysis_jzp8tc_a extends BaseMpsProducer<SNode> {
    public ProducerPart_NodeAnalysis_jzp8tc_a(ConfigurationType configurationType, String factoryName) {
      super(configurationType, factoryName);
    }

    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), "org.campagnelab.metar.tables.structure.Analysis");
    }

    protected R_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(new MPSPsiElement(source));
      R_Configuration configuration = ((R_Configuration) getConfigurationFactory().createConfiguration("" + "Script " + SPropertyOperations.getString(source, "name"), (R_Configuration) RunManagerImpl.getInstanceImpl(getContext().getProject()).getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(source);
      return configuration;
    }

    @Override
    public R_Producer.ProducerPart_NodeAnalysis_jzp8tc_a clone() {
      return (R_Producer.ProducerPart_NodeAnalysis_jzp8tc_a) super.clone();
    }
  }
}
