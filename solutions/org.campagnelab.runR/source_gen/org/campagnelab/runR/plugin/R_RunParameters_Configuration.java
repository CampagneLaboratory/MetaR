package org.campagnelab.runR.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.execution.api.settings.ITemplatePersistentConfiguration;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.apache.log4j.Level;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import jetbrains.mps.build.util.Context;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.build.util.RelativePathHelper;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class R_RunParameters_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  @NotNull
  private R_RunParameters_Configuration.MyState myState = new R_RunParameters_Configuration.MyState();

  public void checkConfiguration() throws RuntimeConfigurationException {
    if (this.getProperties().R_HOME() == null || this.getProperties().workingDirectory() == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Missing parameter(s)");
      }
    }
  }

  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }

  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }

  public R_Options getProperties() {
    return myState.myProperties;
  }

  public void setProperties(R_Options value) {
    myState.myProperties = value;
  }

  /*package*/ String getScriptPath(Context context, SModel model) {
    RelativePathHelper relativePathHelper = context.getRelativePathHelper(model);
    if (relativePathHelper == null) {
      // model is packaged, i.e. no base path for it 
      return null;
    }
    return relativePathHelper.getBasePath();
  }

  @Override
  public R_RunParameters_Configuration clone() {
    R_RunParameters_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (R_RunParameters_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }

  public class MyState {
    public R_Options myProperties = new R_Options(null, null);

    public MyState() {
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
      R_RunParameters_Configuration.MyState state = new R_RunParameters_Configuration.MyState();
      if (myProperties != null) {
        state.myProperties = myProperties.clone();
      }
      return state;
    }
  }

  public R_RunParameters_Configuration() {
  }

  private SettingsEditorEx<R_RunParameters_Configuration> myEditorEx;

  public R_RunParameters_Configuration createCloneTemplate() {
    return new R_RunParameters_Configuration();
  }

  public R_RunParameters_Configuration_Editor getEditor() {
    return new R_RunParameters_Configuration_Editor();
  }

  public SettingsEditorEx<R_RunParameters_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }

  protected static Logger LOG = LogManager.getLogger(R_RunParameters_Configuration.class);
}
