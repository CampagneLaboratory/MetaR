package org.campagnelab.runR.plugin;

/*Generated by MPS */

import java.io.File;
import com.intellij.execution.process.ProcessHandler;
import org.jetbrains.mps.openapi.model.SNodeReference;
import com.intellij.execution.ExecutionException;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class Run_R_Command {
  private String myR_HOME_String = "/Library/Frameworks/R.framework/Resources/";
  private File myWorkingDirectory_File;

  public Run_R_Command() {
  }

  public Run_R_Command setR_HOME_String(String R_HOME) {
    if (R_HOME != null) {
      myR_HOME_String = R_HOME;
    }
    return this;
  }

  public Run_R_Command setWorkingDirectory_File(File workingDirectory) {
    if (workingDirectory != null) {
      myWorkingDirectory_File = workingDirectory;
    }
    return this;
  }

  public ProcessHandler createProcess(SNodeReference nodePointer, String scriptPath) throws ExecutionException {
    String R_HOME_var = Run_R_Command.getRHome(myR_HOME_String);
    if (LOG.isInfoEnabled()) {
      LOG.info("obtained R_HOME:" + R_HOME_var);
    }
    if (LOG.isInfoEnabled()) {
      LOG.info("obtained working directory:" + myWorkingDirectory_File);
    }
    // the below line is created with a ProcessBuilder. The process builder accepts command parts, but does not render 
    // explicitely. 
    return new ProcessHandlerBuilder().append(Run_R_Command.getR(R_HOME_var)).append(Run_R_Command.protect(scriptPath)).build(myWorkingDirectory_File);
  }

  private static File getR(String R_HOME) {
    return new File(R_HOME + "/bin/Rscript");
  }

  public static String getRHome(String R_HOME) {
    if (R_HOME != null) {
      return R_HOME;
    }
    if (isNotEmptyString(System.getenv("R_HOME"))) {
      return System.getenv("R_HOME");
    }
    return null;
  }

  public static String protect(String result) {
    if (result.contains(" ")) {
      return "\"" + result + "\"";
    }
    return result;
  }

  protected static Logger LOG = LogManager.getLogger(Run_R_Command.class);

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
